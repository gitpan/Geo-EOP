=head1 NAME

Geo::EOP - Earth Observation Products EOP

=head1 INHERITANCE

 Geo::EOP
   is a Geo::GML
   is a XML::Compile::Cache
   is a XML::Compile::Schema
   is a XML::Compile

=head1 SYNOPSIS

 use Geo::EOP ':eop1.1';

 my $eop = Geo::EOP->new(eop_version => '1.1');

 # see XML::Compile::Cache on how to use readers and writers
 my $data = $eop->reader("gml:GridCoverage")->($xmlmsg);
 my $xml  = $eop->writer($sometype)->($doc, $perldata);

 # or without help of the cache, XML::Compile::Schema
 my $r    = $gml->compile(READER => $sometype);
 my $data = $r->($xml);

 # read a eop data file.  Autodetects the version used.
 my ($type, $data) = Geo::EOP->from('data.xml');
 print "Root type:   $type\n";
 print "EOP version: $data->{version}\n";

 # huge overview on all defined elements
 $gml->printIndex;

=head1 DESCRIPTION

Provides access to the EOP definitions specified as XML schemas, based
on GML.  Up to version 1.0, these schemas where named 'HMA' (Heterogeneous
EO Missions Accessibility), and the development is still part of these
ESA efforts for standardization.

BE WARNED that HMA1.0 and EOP 1.1/1.2 are only using a B<subset> of GML
version 3.1.1, due to problems with some software tools.  This limitation
will probably be removed in 1.3 (or whatever the next version will
be named).

The first releases of this module will not powerful, but hopefully
people contribute.  For instance, an example conversion script between
various versions is very welcome!  It would be nice to help each other.
I will clean-up the implementation, to make it publishable, but do not
have the knowledge about needed to implement the converter itself.

=head1 METHODS

=head2 Constructors

Geo::EOP-E<gt>B<from>(XMLDATA, OPTIONS)

=over 4

Read a EOP structure from a data source, which can be anything acceptable
by L<dataToXML()|XML::Compile/"Compilers">: a XML::LibXML::Element, XML as string or ref-string,
filename, filehandle or known namespace.

Returned is the product (the type of the root node) and the parsed
data-structure.  The EOP version used for decoding is autodetected,
unless specified.

See F<examples/read_eop.pl>

example: 

  my ($type, $data) = Geo::EOP->from('data.xml');

=back

Geo::EOP-E<gt>B<new>(OPTIONS)

=over 4

 Option            --Defined in     --Default
 allow_undeclared    Geo::GML         <true>
 any_element         XML::Compile::Cache  ATTEMPT
 eop_version                          <required>
 hook                XML::Compile::Schema  undef
 hooks               XML::Compile::Schema  []
 ignore_unused_tags  XML::Compile::Schema  <false>
 key_rewrite         XML::Compile::Schema  []
 opts_readers        XML::Compile::Cache  []
 opts_rw             XML::Compile::Cache  <some>
 opts_writers        XML::Compile::Cache  []
 prefixes            Geo::GML         undef
 schema_dirs         XML::Compile     undef
 typemap             XML::Compile::Schema  {}
 units                                <none>
 version             Geo::GML         <required>

. allow_undeclared => BOOLEAN

. any_element => CODE|'TAKE_ALL'|'SKIP_ALL'|'ATTEMPT'

. eop_version => VERSION|NAMESPACE

=over 4

Only used when the object is created directly from this base-class.  It
determines which EOP syntax is to be used.  Can be a VERSION like "1.1"
or a NAMESPACE URI like 'NS_EOP_11'.

=back

. hook => ARRAY-WITH-HOOKDATA | HOOK

. hooks => ARRAY-OF-HOOK

. ignore_unused_tags => BOOLEAN|REGEXP

. key_rewrite => HASH|CODE|ARRAY-of-HASH-and-CODE

. opts_readers => HASH|ARRAY-of-PAIRS

. opts_rw => HASH|ARRAY-of-PAIRS

. opts_writers => HASH|ARRAY-of-PAIRS

. prefixes => ARRAY|HASH

. schema_dirs => DIRECTORY|ARRAY-OF-DIRECTORIES

. typemap => HASH

. units => HASH

=over 4

See L</Units>.  Only if you specify your preference in units of measurement,
some automatic translations will be performed.

=back

. version => VERSION|NAMESPACE

=back

=head2 Accessors

$obj-E<gt>B<addHook>(HOOKDATA|HOOK|undef)

=over 4

See L<XML::Compile::Schema/"Accessors">

=back

$obj-E<gt>B<addHooks>(HOOK, [HOOK, ...])

=over 4

See L<XML::Compile::Schema/"Accessors">

=back

$obj-E<gt>B<addKeyRewrite>(CODE|HASH, CODE|HASH, ...)

=over 4

See L<XML::Compile::Schema/"Accessors">

=back

$obj-E<gt>B<addSchemaDirs>(DIRECTORIES|FILENAME)

Geo::EOP-E<gt>B<addSchemaDirs>(DIRECTORIES|FILENAME)

=over 4

See L<XML::Compile/"Accessors">

=back

$obj-E<gt>B<addSchemas>(XML, OPTIONS)

=over 4

See L<XML::Compile::Schema/"Accessors">

=back

$obj-E<gt>B<addTypemap>(PAIR)

=over 4

See L<XML::Compile::Schema/"Accessors">

=back

$obj-E<gt>B<addTypemaps>(PAIRS)

=over 4

See L<XML::Compile::Schema/"Accessors">

=back

$obj-E<gt>B<allowUndeclared>([BOOLEAN])

=over 4

See L<XML::Compile::Cache/"Accessors">

=back

$obj-E<gt>B<direction>

=over 4

See L<Geo::GML/"Accessors">

=back

$obj-E<gt>B<eopVersion>

=over 4

EOP/HMA version, for instance '1.0'.

=back

$obj-E<gt>B<hooks>

=over 4

See L<XML::Compile::Schema/"Accessors">

=back

$obj-E<gt>B<prefix>(PREFIX)

=over 4

See L<XML::Compile::Cache/"Accessors">

=back

$obj-E<gt>B<prefixFor>(URI)

=over 4

See L<XML::Compile::Cache/"Accessors">

=back

$obj-E<gt>B<prefixes>([PAIRS|ARRAY|HASH])

=over 4

See L<XML::Compile::Cache/"Accessors">

=back

$obj-E<gt>B<useSchema>(SCHEMA, [SCHEMA])

=over 4

See L<XML::Compile::Schema/"Accessors">

=back

$obj-E<gt>B<version>

=over 4

See L<Geo::GML/"Accessors">

=back

=head2 Compilers

$obj-E<gt>B<compile>(('READER'|'WRITER'), TYPE, OPTIONS)

=over 4

See L<XML::Compile::Schema/"Compilers">

=back

$obj-E<gt>B<compileAll>(['READER'|'WRITER'|'RW', [NAMESPACE]])

=over 4

See L<XML::Compile::Cache/"Compilers">

=back

Geo::EOP-E<gt>B<dataToXML>(NODE|REF-XML-STRING|XML-STRING|FILENAME|FILEHANDLE|KNOWN)

=over 4

See L<XML::Compile/"Compilers">

=back

$obj-E<gt>B<reader>(TYPE|NAME, OPTIONS)

=over 4

See L<XML::Compile::Cache/"Compilers">

=back

$obj-E<gt>B<template>('PERL'|'XML', TYPE, OPTIONS)

=over 4

See L<Geo::GML/"Compilers">

=back

$obj-E<gt>B<writer>(TYPE|NAME)

=over 4

See L<XML::Compile::Cache/"Compilers">

=back

=head2 Helpers

$obj-E<gt>B<GPtoGML>(OBJECT, OPTIONS)

=over 4

See L<Geo::GML::GeoPoint/"Helpers">

=back

=head2 Administration

$obj-E<gt>B<declare>('READER'|'WRITER'|'RW', TYPE|ARRAY-of-TYPES, OPTIONS)

=over 4

See L<XML::Compile::Cache/"Administration">

=back

$obj-E<gt>B<elements>

=over 4

See L<XML::Compile::Schema/"Administration">

=back

$obj-E<gt>B<findName>(NAME)

=over 4

See L<XML::Compile::Cache/"Administration">

=back

$obj-E<gt>B<findSchemaFile>(FILENAME)

Geo::EOP-E<gt>B<findSchemaFile>(FILENAME)

=over 4

See L<XML::Compile/"Administration">

=back

$obj-E<gt>B<importDefinitions>(XMLDATA, OPTIONS)

=over 4

See L<XML::Compile::Schema/"Administration">

=back

$obj-E<gt>B<knownNamespace>(NAMESPACE|PAIRS)

Geo::EOP-E<gt>B<knownNamespace>(NAMESPACE|PAIRS)

=over 4

See L<XML::Compile/"Administration">

=back

$obj-E<gt>B<namespaces>

=over 4

See L<XML::Compile::Schema/"Administration">

=back

$obj-E<gt>B<printIndex>([FILEHANDLE], OPTIONS)

=over 4

List all the elements which can be produced with the schema.  By default,
this only shows the elements and excludes the abstract elements from
the list.  The selected FILEHANDLE is the default to print to.

 Option       --Defined in         --Default
 show_declared  XML::Compile::Cache  <true>

. show_declared => BOOLEAN

=back

$obj-E<gt>B<types>

=over 4

See L<XML::Compile::Schema/"Administration">

=back

$obj-E<gt>B<walkTree>(NODE, CODE)

=over 4

See L<XML::Compile/"Administration">

=back

=head1 DETAILS

=head2 Units

GML is careful about its units, which is nice but verbose.
Therefore, this module gives you a way to set your preferences.
The reader will simplify the structure, re-calculating the values
found into the units of measure you prefer, according to UCUM
(F<http://aurora.regenstrief.org/ucum>)

  my $eop = Geo::EOP->new(...
     , units => { distance => 'm'
                , angle    => 'deg' }
     );

Available conversions:

=over 4

=item angle 'deg'|'rad'

Will be applied to all AngleType elements

=item distance 'm'

Will be applied to all MeasureType elements

=item percentage '%'|'float'

Will be applied to all elements with a name ending on "Percentage".
I am not sure about the C<float>... cannot find the uom name.

=back

=head1 DIAGNOSTICS

Error: cannot find pre-installed name-space files

=over 4

Use C<$ENV{SCHEMA_LOCATION}> or L<new(schema_dirs)|XML::Compile/"Constructors"> to express location
of installed name-space files, which came with the L<XML::Compile|XML::Compile>
distribution package.

=back

Error: don't known how to interpret XML data

=over 4

=back

=head1 SEE ALSO

This module is part of Geo-EOP distribution version 0.13,
built on January 29, 2009. Website: F<http://perl.overmeer.net/geo/>
All modules in this suite:
L</Geo::GML>,
L</Geo::ISO19139>,
L</Geo::EOP>,
L</Geo::Point>,
L</Geo::Proj4>,
L</Geo::WKT>, and
L</Math::Polygon>.

Please post questions or ideas to
F<http://geo-perl@list.hut.fi|the Geo-Perl mailinglist>

=head1 COPYRIGHTS

=head2 License of the CODE

Copyrights of the perl code and the related documentation by
2008-2009 by Mark Overmeer. For other contributors see ChangeLog.

This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
See F<http://www.perl.com/perl/misc/Artistic.html>

=head2 License of the SCHEMAS

The included schemas are copyrighted by the Open Geospatial Consortium, Inc.
They are unmodified copied from the files at F<http://schemas.opengis.net>.
Read OGCs disclaimer and copyright statements on documentation and software
at F<http://www.opengeospatial.org/ogc/legal>.  The license text is also
included in this CPAN distribution.

